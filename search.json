[{"path":"https://robinhankin.github.io/freegroup/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/freegroup/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin RKS (2022). “free group R.” doi:10.48550/ARXIV.2212.05883.","code":"@Misc{,   title = {The free group in R},   author = {Robin K. S. Hankin},   year = {2022},   publisher = {arXiv},   doi = {10.48550/ARXIV.2212.05883}, }"},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"The Free Group","text":"freegroup package provides functionality working free group R. detailed vignette provided package. Informally, free group set  words objects like , group operation string juxtaposition. Usually one works words ``reduced form’’, successive powers symbol combined,  equal ; see  appears third power  term middle vanished. group operation juxtaposition formally indicated , often omitted algebraic notation; thus, example .","code":""},{"path":"https://robinhankin.github.io/freegroup/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Free Group","text":"can install released version freegroup CRAN :","code":"# install.packages(\"freegroup\")  # uncomment this to install the package library(\"freegroup\")"},{"path":"https://robinhankin.github.io/freegroup/index.html","id":"the-freegroup-package-in-use","dir":"","previous_headings":"","what":"The freegroup package in use","title":"The Free Group","text":"Function rfree() generates vector random free group elements, giving quick “get going” examples: can perform various operations vectors: number package functions work vectorized way: package also supports extraction replacement: Various simple elements can created:","code":"a <- rfree(10,5) a #>  [1] a.d^5.a^-4.b^5.e^-3 a.e^2.b^2           a^3.e^-7.b^-3       #>  [4] b^7.d^4             a^2.b^-4.c^-4       a^-5.d^3.c^3        #>  [7] d^-5.e^-1.d^-5.e^3  c.b^-7.c^4.b^-5     c^6.e^2             #> [10] e^-3.d^5.a^-5 b <- as.free('x') a+b #>  [1] a.d^5.a^-4.b^5.e^-3.x a.e^2.b^2.x           a^3.e^-7.b^-3.x       #>  [4] b^7.d^4.x             a^2.b^-4.c^-4.x       a^-5.d^3.c^3.x        #>  [7] d^-5.e^-1.d^-5.e^3.x  c.b^-7.c^4.b^-5.x     c^6.e^2.x             #> [10] e^-3.d^5.a^-5.x a-b #>  [1] a.d^5.a^-4.b^5.e^-3.x^-1 a.e^2.b^2.x^-1           a^3.e^-7.b^-3.x^-1       #>  [4] b^7.d^4.x^-1             a^2.b^-4.c^-4.x^-1       a^-5.d^3.c^3.x^-1        #>  [7] d^-5.e^-1.d^-5.e^3.x^-1  c.b^-7.c^4.b^-5.x^-1     c^6.e^2.x^-1             #> [10] e^-3.d^5.a^-5.x^-1 a^b #>  [1] x^-1.a.d^5.a^-4.b^5.e^-3.x x^-1.a.e^2.b^2.x           #>  [3] x^-1.a^3.e^-7.b^-3.x       x^-1.b^7.d^4.x             #>  [5] x^-1.a^2.b^-4.c^-4.x       x^-1.a^-5.d^3.c^3.x        #>  [7] x^-1.d^-5.e^-1.d^-5.e^3.x  x^-1.c.b^-7.c^4.b^-5.x     #>  [9] x^-1.c^6.e^2.x             x^-1.e^-3.d^5.a^-5.x sum(a) #> [1] a.d^5.a^-4.b^5.e^-3.a.e^2.b^2.a^3.e^-7.b^4.d^4.a^2.b^-4.c^-4.a^-5.d^3.c^3.d^-5.e^-1.d^-5.e^3.c.b^-7.c^4.b^-5.c^6.e^-1.d^5.a^-5 a[3:9] <- as.free('xy') a #>  [1] a.d^5.a^-4.b^5.e^-3 a.e^2.b^2           x.y                 #>  [4] x.y                 x.y                 x.y                 #>  [7] x.y                 x.y                 x.y                 #> [10] e^-3.d^5.a^-5 alpha(1:10) #>  [1] a b c d e f g h i j abc(1:5) #> [1] a         a.b       a.b.c     a.b.c.d   a.b.c.d.e"},{"path":"https://robinhankin.github.io/freegroup/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"The Free Group","text":"Wikipedia contributors, “Free group,” Wikipedia, free encyclopedia, 4 June 2019. [https://en.wikipedia.org/w/index.php?title=Free_group&oldid=900295259]","code":""},{"path":"https://robinhankin.github.io/freegroup/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"The Free Group","text":"detail, see package vignette vignette(\"freegroup\")","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace parts of a free group object — Extract","title":"Extract or replace parts of a free group object — Extract","text":"Extract replace subsets free objects","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a free group object — Extract","text":"x Object class free index elements extract replace value replacement value","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or replace parts of a free group object — Extract","text":"methods () work expected: object class free list standard extraction techniques work.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or replace parts of a free group object — Extract","text":"","code":"(x <- rfree(20,8,8)) #>  [1] e^-5.g^-7.e^-4.f^6.g^-3              f^-7.g^-3.c^-5.f^7.c^-7.e^-4.d^-2    #>  [3] h^-7.e^8.f^-8.a^-3.f^-7.g^5.b^-8.h^6 b^7.e^2.h^-6.a^-7.h.d^-6.c^-3.d^-5   #>  [5] b^-1.a^-8.g^-8.f.a.b^-7              f^-2.g^3.d^8.b^-4.d^8.f.e^-8         #>  [7] a^-5.e^-2.b^-7.h^-1.c^-3.a^4         e^2.a^-5.e^-4.b^8.g.d^3              #>  [9] e^8.h^-3.g^3.e^-2.d^2.a.c^-1.g^8     d^-5.g^-5.b^4.d^-3.f^5.e^-7.b^-4     #> [11] c^8.b^2.d^6.c^8.h^6                  g^5.e^-2.a^-1.d^3.g^-6.c^6           #> [13] d^-8.h^-7.g^2.b^-1.h^6.d^2           h.d^2.c^6.a^-7.d.a.e^-7              #> [15] e^4.f^-6.c^6.a^6.f^-1                b^4.g^-7.e^4.h^-6.c^8.d^-8.e^7       #> [17] b^-11.c^3.e^3.b^-1.c^7.h^5           f^-2.d^-5.a^-4.f^3.e^-1.f^2.g^7      #> [19] c^8.b^2.c^-4.h^3.b^-3.f^14           d^-3.g^3                              x[5:6] #> [1] b^-1.a^-8.g^-8.f.a.b^-7      f^-2.g^3.d^8.b^-4.d^8.f.e^-8 x[1:2]  <- -x[11:12]  x[1:5] <- keep(x[1:5],1:3)"},{"path":"https://robinhankin.github.io/freegroup/reference/Ops.free.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Ops methods for the free group — Ops.free","title":"Arithmetic Ops methods for the free group — Ops.free","text":"Allows arithmetic operators used manipulation free group elements   addition, multiplication, powers, etc","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Ops.free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Ops methods for the free group — Ops.free","text":"","code":"# S3 method for class 'free' Ops(e1, e2) free_equal(e1,e2) free_power(e1,e2) free_repeat(e1,n) juxtapose(e1,e2) # S3 method for class 'free' inverse(e1) # S3 method for class 'matrix' inverse(e1)"},{"path":"https://robinhankin.github.io/freegroup/reference/Ops.free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Ops methods for the free group — Ops.free","text":"e1,e2 Objects class free n integer, possibly non-positive","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Ops.free.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic Ops methods for the free group — Ops.free","text":"function Ops.free() passes binary arithmetic operators   (“+”, “-”, “*”,   “^”, “==”) appropriate   specialist function. two non-trivial basic operations: juxtaposition, denoted   “+b”, inversion, denoted “-”.  Note   juxtaposition noncommutative +b ,   general, equal b+. operations return reduced word. caret, ^b, denotes group-theoretic exponentiation   (-b++b); notation motivated identities   x^(yz) == (x^y)^z (xy)^z == x^z * y^z,   permutations package. experimental feature package now accepts   multiplicative notation, identities manifest package idiom   written.  However, renders distributivity incorrect   x*(y + z) x*y + x*z equal, general   [distributivity manifests x*c(y, z) == c(x*y, x*z)]. Multiplication free object integer n   (*n n*) defined juxtaposing n   copies reducing.  Zero negative values n   work expected. Comparing free object numeric make sense   idiom rfree() > 4 return error.  Comparing   free object another free object might desirable   [specifically, lexicographic ordering], currently   implemented.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Ops.free.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arithmetic Ops methods for the free group — Ops.free","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Ops.free.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Arithmetic Ops methods for the free group — Ops.free","text":"package uses additive notation multiplicative notation might   better.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/Ops.free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Ops methods for the free group — Ops.free","text":"","code":"x <- as.free(c(\"a\",\"ab\",\"aaab\",\"abacc\")) y <- as.free(c(\"aa\",\"BA\",\"Bab\",\"aaaaa\")) x #> [1] a         a.b       a^3.b     a.b.a.c^2 y #> [1] a^2       b^-1.a^-1 b^-1.a.b  a^5         x + x #> [1] a^2                 a.b.a.b             a^3.b.a^3.b         #> [4] a.b.a.c^2.a.b.a.c^2 x + y #> [1] a^3           0             a^4.b         a.b.a.c^2.a^5 x + as.free(\"xyz\") #> [1] a.x.y.z         a.b.x.y.z       a^3.b.x.y.z     a.b.a.c^2.x.y.z  x+y == y+x    # not equal in  general #> [1]  TRUE  TRUE FALSE FALSE  x*5 == x+x+x+x+x      # always true #> [1] TRUE TRUE TRUE TRUE  x + alpha(26) #> [1] a.z         a.b.z       a^3.b.z     a.b.a.c^2.z  x^y #> [1] a                 a.b               b^-1.a^-1.b.a^4.b a^-4.b.a.c^2.a^5"},{"path":"https://robinhankin.github.io/freegroup/reference/abelianize.html","id":null,"dir":"Reference","previous_headings":"","what":"Abelianization of free group elements — abelianize","title":"Abelianization of free group elements — abelianize","text":"Function abelianize() returns word equivalent argument assumption Abelianness.  symbols placed alphabetical order.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abelianize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abelianization of free group elements — abelianize","text":"","code":"abelianize(x)   is.abelian(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/abelianize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abelianization of free group elements — abelianize","text":"x object class free","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abelianize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Abelianization of free group elements — abelianize","text":"Abelianizing free group element means symbols can commute past one another.  Abelianization vectorized. Function .abelian() trivial: just checks see whether argument x symbols alphabetical order.  might better call abelianized(). Package frab presents extensive R-centric functionality dealing free Abelian group.  much efficient package Abelian operations, contains bespoke methods working range applications tables counts.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abelianize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Abelianization of free group elements — abelianize","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abelianize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abelianization of free group elements — abelianize","text":"","code":"x <- as.free(\"aabAA\") x #> [1] a^2.b.a^-2 abelianize(x) #> [1] b  x <- rfree(10,10,2) x #>  [1] b^-1.a^-5.b^-9                           #>  [2] b^5.a^4.b^-6.a^-8.b^-10.a^9              #>  [3] b^-5.a^-1.b^-4.a^-5.b^-23.a^-5.b^-7.a^-1 #>  [4] b^3.a^15.b^-1.a^13.b^-1                  #>  [5] a^-5.b^7.a^5.b^-6.a^-6                   #>  [6] b^-2.a^-3.b^9.a^-11.b^5                  #>  [7] b^16.a^-17                               #>  [8] a^4.b^-10.a^-17.b^13                     #>  [9] b.a^-5.b^7.a^-2.b^-9.a^-3.b^9            #> [10] b^11.a^9.b^3.a^-7.b^-3.a^4.b^-5          abelianize(x) #>  [1] a^-5.b^-10  a^5.b^-11   a^-12.b^-39 a^28.b      a^-6.b      a^-14.b^12  #>  [7] a^-17.b^16  a^-13.b^3   a^-10.b^8   a^6.b^6      abelianize(.[rfree(),rfree()]) #> [1] 0 0 0 0 0 0 0   p <- free(rbind(rep(1:5,4),rep(1:4,5))) p #> [1] a.b^2.c^3.d^4.e.a^2.b^3.c^4.d.e^2.a^3.b^4.c.d^2.e^3.a^4.b.c^2.d^3.e^4 abelianize(p) #> [1] a^10.b^10.c^10.d^10.e^10"},{"path":"https://robinhankin.github.io/freegroup/reference/abs.html","id":null,"dir":"Reference","previous_headings":"","what":"Absolute value of a free object — abs.free","title":"Absolute value of a free object — abs.free","text":"Replaces every term's power absolute value","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Absolute value of a free object — abs.free","text":"","code":"# S3 method for class 'free' abs(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/abs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Absolute value of a free object — abs.free","text":"x Object class free","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Absolute value of a free object — abs.free","text":"Replaces every term's power absolute value","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Absolute value of a free object — abs.free","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/abs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Absolute value of a free object — abs.free","text":"function's name motivated  inequality examples section.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/abs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Absolute value of a free object — abs.free","text":"","code":"abs(abc(-5:5)) #>  [1] e.d.c.b.a d.c.b.a   c.b.a     b.a       a         0         a         #>  [8] a.b       a.b.c     a.b.c.d   a.b.c.d.e  a <- rfree(10,4,7) b <- rfree(10,4,7)  a #>  [1] d^3.f^-2.b^2      d^-1.b.c          a^-1.c^-3.e^-3    e^-1.d^3.b^-3     #>  [5] a^4.f.a           a^-2.g.d^-1       a^-2.g^3.a^-3.d^2 e^2.f^-1.c^-3     #>  [9] b.g^3.d^2         a^8.f^-3          abs(a) #>  [1] d^3.f^2.b^2     d.b.c           a.c^3.e^3       e.d^3.b^3       #>  [5] a^4.f.a         a^2.g.d         a^2.g^3.a^3.d^2 e^2.f.c^3       #>  [9] b.g^3.d^2       a^8.f^3          ## following should all be TRUE: all(size(abs(a+b))  <=  size(abs(a) + abs(b))) #> [1] TRUE all(total(abs(a+b)) <=  total(abs(a) + abs(b))) #> [1] TRUE all(number(abs(a+b)) <= number(abs(a) + abs(b))) #> [1] TRUE  all(size(a+b)   <= size(abs(a) + abs(b))) #> [1] TRUE all(total(a+b)  <= total(abs(a) + abs(b))) #> [1] TRUE all(number(a+b) <= number(abs(a) + abs(b))) #> [1] TRUE"},{"path":"https://robinhankin.github.io/freegroup/reference/alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Alphabetical free group elements — alpha","title":"Alphabetical free group elements — alpha","text":"Produces simple vectors free group elements based   alphabet","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alphabetical free group elements — alpha","text":"","code":"alpha(v) abc(v)"},{"path":"https://robinhankin.github.io/freegroup/reference/alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alphabetical free group elements — alpha","text":"v Vector integers","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/alpha.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alphabetical free group elements — alpha","text":"Function alpha() takes integer returns   letter alphabet.  Thus alpha(3) returns   c.  function vectorised: alpha(1:3) returns   b c. Function abc() takes integer returns letters   1 alphabet.  Thus abc(4) returns   .b.c.d.  function vectorised. Remember “letters alphabet” just phrase:   refers default print method can changed,   see examples.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/alpha.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Alphabetical free group elements — alpha","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/alpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alphabetical free group elements — alpha","text":"","code":"alpha(5)  # just the single letter 'e' #> [1] e abc(5)    # product of a,b,c,d,e #> [1] a.b.c.d.e  alpha(1:26)  # the whole alphabet; c #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z  all(alpha(1:26) == as.free(letters))  # should be TRUE #> [1] TRUE  z <- alpha(26)  # variable 'z' is symbol 26, aka 'z'. abc(1:10) ^ z #>  [1] z^-1.a.z                   z^-1.a.b.z                 #>  [3] z^-1.a.b.c.z               z^-1.a.b.c.d.z             #>  [5] z^-1.a.b.c.d.e.z           z^-1.a.b.c.d.e.f.z         #>  [7] z^-1.a.b.c.d.e.f.g.z       z^-1.a.b.c.d.e.f.g.h.z     #>  [9] z^-1.a.b.c.d.e.f.g.h.i.z   z^-1.a.b.c.d.e.f.g.h.i.j.z  abc(-5:5) #>  [1] e^-1.d^-1.c^-1.b^-1.a^-1 d^-1.c^-1.b^-1.a^-1      c^-1.b^-1.a^-1           #>  [4] b^-1.a^-1                a^-1                     0                        #>  [7] a                        a.b                      a.b.c                    #> [10] a.b.c.d                  a.b.c.d.e                alpha(-5:5) #>  [1] e^-1 d^-1 c^-1 b^-1 a^-1 0    a    b    c    d    e    sum(abc(-5:5)) #> [1] 0   ## bear in mind that the symbols used are purely for the print method: jj <- LETTERS[1:10] options(freegroup_symbols = apply(expand.grid(jj,jj),1,paste,collapse=\"\")) alpha(c(66,67,68,69))   # sensible output #> [1] FG GG HG IG options(freegroup_symbols=NULL)   # restore to symbols to default letters alpha(c(66,67,68,69))   # print method not very helpful now #> [1] NA NA NA NA"},{"path":"https://robinhankin.github.io/freegroup/reference/backwards.html","id":null,"dir":"Reference","previous_headings":"","what":"Write free objects backwards — backwards","title":"Write free objects backwards — backwards","text":"Write free objects reverse order","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/backwards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write free objects backwards — backwards","text":"","code":"backwards(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/backwards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write free objects backwards — backwards","text":"x Object class free","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/backwards.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write free objects backwards — backwards","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/backwards.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Write free objects backwards — backwards","text":"element free object, function backwards()   writes symbols reverse order.  distinct   rev(), see examples. Function backwards involution: inverse.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/backwards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write free objects backwards — backwards","text":"","code":"abc(1:5) #> [1] a         a.b       a.b.c     a.b.c.d   a.b.c.d.e backwards(abc(1:5)) #> [1] a         b.a       c.b.a     d.c.b.a   e.d.c.b.a rev(abc(1:5)) #> [1] a.b.c.d.e a.b.c.d   a.b.c     a.b       a          x <- rfree(10,5) backwards(backwards(x)) == x  # involution #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE all(abelianize(x) == abelianize(backwards(x))) # should be TRUE #> [1] TRUE"},{"path":"https://robinhankin.github.io/freegroup/reference/c.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenation of free objects — c","title":"Concatenation of free objects — c","text":"Concatenate free objects together","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenation of free objects — c","text":"","code":"# S3 method for class 'free' c(...) # S3 method for class 'free' rep(x, ...)"},{"path":"https://robinhankin.github.io/freegroup/reference/c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenation of free objects — c","text":"... method c(), objects     concatenated.  type x method rep(), free object","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/c.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Concatenation of free objects — c","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenation of free objects — c","text":"","code":"(x <- abc(1:3)) #> [1] a     a.b   a.b.c (y <- alpha(22:25)) #> [1] v w x y  c(x,y,x,x) #>  [1] a     a.b   a.b.c v     w     x     y     a     a.b   a.b.c a     a.b   #> [13] a.b.c   ## NB: compare rep(x,2)   #> [1] a     a.b   a.b.c a     a.b   a.b.c x*2   #> [1] a^2         a.b.a.b     a.b.c.a.b.c"},{"path":"https://robinhankin.github.io/freegroup/reference/char_to_free.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character vectors to free objects — char_to_free","title":"Convert character vectors to free objects — char_to_free","text":"Convert character vectors free objects","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/char_to_free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character vectors to free objects — char_to_free","text":"","code":"char_to_matrix(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/char_to_free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character vectors to free objects — char_to_free","text":"x character vector","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/char_to_free.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert character vectors to free objects — char_to_free","text":"Function char_to_matrix() gives basic conversion   character vectors free objects.  Current functionality limited   strings like “aaabaacd”, give   \\(^3ba^2cd\\).  nice take string   like “^3b^(-3)” yet implemented. Function char_to_free() vectorized version coerces   output free.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/char_to_free.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert character vectors to free objects — char_to_free","text":"function particularly robust; example, passing anything   letters -z -Z give possibly undesirable   behaviour. Upper-case letters -Z interpreted char_to_matrix()   inverse corresponding lower-case equivalents.    behaviour inherited char_to_free() .free(),   .free(\"\") == inverse(.free(\"\")). Function char_to_free() consistent default print   options (symbols lowercase letters -z).   change symbols' names, example   options(freegroup_symbols=sample(letters)), things can get   confusing.  print method change internal   representation free object, list integer   matrices.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/char_to_free.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert character vectors to free objects — char_to_free","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/char_to_free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert character vectors to free objects — char_to_free","text":"","code":"char_to_matrix(\"aaabcABC\") #>    [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> jj    1    1    1    2    3    1    2    3 #> s     1    1    1    1    1   -1   -1   -1  rfree(10,3) + as.free('xxxxxxxxxxxx') #>  [1] c^2.b^3.a^2.x^12   b^-1.x^12          b^2.x^12           c^-3.x^12          #>  [5] a^-3.x^12          b^3.c.a^-2.x^12    b^-2.x^12          c^3.a^2.c^2.x^12   #>  [9] a^-3.c^-4.x^12     b^2.a^-3.b^-3.x^12  as.free(letters)*7 #>  [1] a^7 b^7 c^7 d^7 e^7 f^7 g^7 h^7 i^7 j^7 k^7 l^7 m^7 n^7 o^7 p^7 q^7 r^7 s^7 #> [20] t^7 u^7 v^7 w^7 x^7 y^7 z^7  all(is.id(as.free(letters) + as.free(LETTERS))) #> [1] TRUE   as.free('')  # identity element #> [1] 0"},{"path":"https://robinhankin.github.io/freegroup/reference/cumsum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative sum — cumsum","title":"Cumulative sum — cumsum","text":"Cumulative sum free vectors","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/cumsum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative sum — cumsum","text":"","code":"# S3 method for class 'free' cumsum(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/cumsum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative sum — cumsum","text":"x Vector class free","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/cumsum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cumulative sum — cumsum","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/cumsum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative sum — cumsum","text":"","code":"abc(1:6) #> [1] a           a.b         a.b.c       a.b.c.d     a.b.c.d.e   a.b.c.d.e.f cumsum(abc(1:6)) #> [1] a                                         #> [2] a^2.b                                     #> [3] a^2.b.a.b.c                               #> [4] a^2.b.a.b.c.a.b.c.d                       #> [5] a^2.b.a.b.c.a.b.c.d.a.b.c.d.e             #> [6] a^2.b.a.b.c.a.b.c.d.a.b.c.d.e.a.b.c.d.e.f  x <- rfree(10,2) cumsum(c(x,-rev(x))) #>  [1] 0                                   a^-1.b                              #>  [3] a^-1.b.a^2.b                        a^-1.b.a^2.b^2                      #>  [5] a^-1.b.a^2.b^2.a^2                  a^-1.b.a^2.b^2.a^2.b^-1             #>  [7] a^-1.b.a^2.b^2.a^2.b^-1.a^2         a^-1.b.a^2.b^2.a^2.b^-1.a^-1        #>  [9] a^-1.b.a^2.b^2.a^2.b^-1.a^-1.b^-1   a^-1.b.a^2.b^2.a^2.b^-1.a^-1.b^-2.a #> [11] a^-1.b.a^2.b^2.a^2.b^-1.a^-1.b^-1   a^-1.b.a^2.b^2.a^2.b^-1.a^-1        #> [13] a^-1.b.a^2.b^2.a^2.b^-1.a^2         a^-1.b.a^2.b^2.a^2.b^-1             #> [15] a^-1.b.a^2.b^2.a^2                  a^-1.b.a^2.b^2                      #> [17] a^-1.b.a^2.b                        a^-1.b                              #> [19] 0                                   0"},{"path":"https://robinhankin.github.io/freegroup/reference/cycred.html","id":null,"dir":"Reference","previous_headings":"","what":"Cyclic reductions of a word — cycred","title":"Cyclic reductions of a word — cycred","text":"Functionality cyclically reduce words detect conjugacy","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/cycred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cyclic reductions of a word — cycred","text":"","code":"is.cyclically_reduced(a) as.cyclically_reduced(a) cyclically_reduce(a) cyclically_reduce_tietze(p) is.conjugate_single(u,v) x %~% y # S3 method for class 'free' is.conjugate(x,y) allconj(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/cycred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cyclic reductions of a word — cycred","text":",x,y object class free p,u,v Integer vector corresponding Tietze form word","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/cycred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cyclic reductions of a word — cycred","text":"free object cyclically reduced iff every cyclic   permutation word reduced.  reduced word cyclically   reduced iff first letter inverse last one.    reduced word cyclically reduced first last symbol differ   (irrespective power) , identical, powers opposite   sign.  example, abac abca cyclically reduced   abca^{-1} .  Function .cyclically_reduced()   tests . Function .cyclically_reduced() takes vector free objects   returns elementwise cyclically reduced equivalents.  Function   cyclically_reduce() synonym better (English) grammar. identity cyclically reduced: shortened   combination cyclic permutation followed reduction.  ensures   .cyclically_reduced(.cyclically_reduced(x)) always   TRUE.  Also, clear identity conjugate   . Two words \\(,b\\) conjugate exists \\(x\\)   \\(ax=xb\\) (equivalently \\(=x^{-1}bx\\)).    detected function .conjugate().  Functions   is_conjugate_single() cyclically_reduce_tietze()   lower-level helper functions. Function allconj() returns cyclically reduced words   conjugate argument.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/cycred.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cyclic reductions of a word — cycred","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/cycred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cyclic reductions of a word — cycred","text":"","code":"(x <- abc(1:9) - abc(9:1)) #> [1] a.i^-1.h^-1.g^-1.f^-1.e^-1.d^-1.c^-1.b^-1.a^-1 #> [2] a.b.h^-1.g^-1.f^-1.e^-1.d^-1.c^-1.b^-1.a^-1    #> [3] a.b.c.g^-1.f^-1.e^-1.d^-1.c^-1.b^-1.a^-1       #> [4] a.b.c.d.f^-1.e^-1.d^-1.c^-1.b^-1.a^-1          #> [5] 0                                              #> [6] a.b.c.d.e.f.d^-1.c^-1.b^-1.a^-1                #> [7] a.b.c.d.e.f.g.c^-1.b^-1.a^-1                   #> [8] a.b.c.d.e.f.g.h.b^-1.a^-1                      #> [9] a.b.c.d.e.f.g.h.i.a^-1                         as.cyclically_reduced(x) #> [1] i^-1.h^-1.g^-1.f^-1.e^-1.d^-1.c^-1.b^-1 #> [2] h^-1.g^-1.f^-1.e^-1.d^-1.c^-1           #> [3] g^-1.f^-1.e^-1.d^-1                     #> [4] f^-1.e^-1                               #> [5] 0                                       #> [6] e.f                                     #> [7] d.e.f.g                                 #> [8] c.d.e.f.g.h                             #> [9] b.c.d.e.f.g.h.i                           a <- rfree(1000,3)  all(size(as.cyclically_reduced(a)) <= size(a)) #> [1] TRUE  all(total(as.cyclically_reduced(a)) <= total(a)) #> [1] TRUE  all(number(as.cyclically_reduced(a)) <= number(a)) #> [1] TRUE     x <- rfree(1000,2)  y <- as.free('ab')  table(conjugate = (x%~%y), equal = (x==y))  # note zero at top right #>          equal #> conjugate FALSE TRUE #>     FALSE   981    0 #>     TRUE      9   10   allconj(as.free('aaaaab')) #> [1] a^5.b     b.a^5     a.b.a^4   a^2.b.a^3 a^3.b.a^2 a^4.b.a    allconj(sum(abc(seq_len(3)))) #> [1] a^2.b.a.b.c c.a^2.b.a.b b.c.a^2.b.a a.b.c.a^2.b b.a.b.c.a^2 a.b.a.b.c.a     x <- rfree(1,10,8,8)  all(is.id(allconj(x) + allconj(-x)[shift(rev(seq_len(total(x))))])) #> [1] TRUE"},{"path":"https://robinhankin.github.io/freegroup/reference/donames.html","id":null,"dir":"Reference","previous_headings":"","what":"Names attributes of free group elements — donames","title":"Names attributes of free group elements — donames","text":"Get set names free group elements arithmetic operations","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/donames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names attributes of free group elements — donames","text":"","code":"donames(f,e1,e2)"},{"path":"https://robinhankin.github.io/freegroup/reference/donames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names attributes of free group elements — donames","text":"f vector, typically class free e1,e2 Objects class free, possibly names","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/donames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Names attributes of free group elements — donames","text":"Function donames() low-level helper function ensures   result arithmetic operations + ^   correct names attributes.  behaviour inherited   base::`+`.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/donames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Names attributes of free group elements — donames","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/donames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names attributes of free group elements — donames","text":"","code":"x <- rfree(9,4) x #> [1] a^-1.b^4        c^-4            b^4.c^4.b^4     a^3.b^-3.a^-1.b #> [5] c^4.b^-2        b.a^-1.d^2      d^2.c^3         c^-3.d^2.a^-4   #> [9] b^2.c^-5.d^-1   names(x) <- letters[1:9] x #>               a               b               c               d               e  #>        a^-1.b^4            c^-4     b^4.c^4.b^4 a^3.b^-3.a^-1.b        c^4.b^-2  #>               f               g               h               i  #>      b.a^-1.d^2         d^2.c^3   c^-3.d^2.a^-4   b^2.c^-5.d^-1   z <- as.free('z') x + x  #>                               a                               b  #>               a^-1.b^4.a^-1.b^4                            c^-8  #>                               c                               d  #>             b^4.c^4.b^8.c^4.b^4 a^3.b^-3.a^-1.b.a^3.b^-3.a^-1.b  #>                               e                               f  #>               c^4.b^-2.c^4.b^-2           b.a^-1.d^2.b.a^-1.d^2  #>                               g                               h  #>                 d^2.c^3.d^2.c^3     c^-3.d^2.a^-4.c^-3.d^2.a^-4  #>                               i  #>     b^2.c^-5.d^-1.b^2.c^-5.d^-1  x^z #>                      a                      b                      c  #>        z^-1.a^-1.b^4.z            z^-1.c^-4.z     z^-1.b^4.c^4.b^4.z  #>                      d                      e                      f  #> z^-1.a^3.b^-3.a^-1.b.z        z^-1.c^4.b^-2.z      z^-1.b.a^-1.d^2.z  #>                      g                      h                      i  #>         z^-1.d^2.c^3.z   z^-1.c^-3.d^2.a^-4.z   z^-1.b^2.c^-5.d^-1.z  z^x #>                                 a                                 b  #>                 b^-4.a.z.a^-1.b^4                        c^4.z.c^-4  #>                                 c                                 d  #>      b^-4.c^-4.b^-4.z.b^4.c^4.b^4 b^-1.a.b^3.a^-3.z.a^3.b^-3.a^-1.b  #>                                 e                                 f  #>               b^2.c^-4.z.c^4.b^-2          d^-2.a.b^-1.z.b.a^-1.d^2  #>                                 g                                 h  #>               c^-3.d^-2.z.d^2.c^3      a^4.d^-2.c^3.z.c^-3.d^2.a^-4  #>                                 i  #>        d.c^5.b^-2.z.b^2.c^-5.d^-1   n <- 1:9 names(n) <- LETTERS[1:9]  x*n #>                                                                                                                             a  #>                                                                                                                      a^-1.b^4  #>                                                                                                                             b  #>                                                                                                                          c^-8  #>                                                                                                                             c  #>                                                                                                   b^4.c^4.b^8.c^4.b^8.c^4.b^4  #>                                                                                                                             d  #>                                                               a^3.b^-3.a^-1.b.a^3.b^-3.a^-1.b.a^3.b^-3.a^-1.b.a^3.b^-3.a^-1.b  #>                                                                                                                             e  #>                                                                                  c^4.b^-2.c^4.b^-2.c^4.b^-2.c^4.b^-2.c^4.b^-2  #>                                                                                                                             f  #>                                                             b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2  #>                                                                                                                             g  #>                                                                       d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3  #>                                                                                                                             h  #>               c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4  #>                                                                                                                             i  #> b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1  n*x  # note different names  #>                                                                                                                             a  #>                                                                                                                      a^-1.b^4  #>                                                                                                                             b  #>                                                                                                                          c^-8  #>                                                                                                                             c  #>                                                                                                   b^4.c^4.b^8.c^4.b^8.c^4.b^4  #>                                                                                                                             d  #>                                                               a^3.b^-3.a^-1.b.a^3.b^-3.a^-1.b.a^3.b^-3.a^-1.b.a^3.b^-3.a^-1.b  #>                                                                                                                             e  #>                                                                                  c^4.b^-2.c^4.b^-2.c^4.b^-2.c^4.b^-2.c^4.b^-2  #>                                                                                                                             f  #>                                                             b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2.b.a^-1.d^2  #>                                                                                                                             g  #>                                                                       d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3.d^2.c^3  #>                                                                                                                             h  #>               c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4.c^-3.d^2.a^-4  #>                                                                                                                             i  #> b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1.b^2.c^-5.d^-1"},{"path":"https://robinhankin.github.io/freegroup/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Class “dot” — dot-class","title":"Class “dot” — dot-class","text":"dot object defined freealg package,   imported , idiom like .[x,y] returns   commutator, , x^-1 y^-1 xy.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class “dot” — dot-class","text":"x Object class ,j elements commute ... arguments dot_error(), currently ignored","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class “dot” — dot-class","text":"Always returns object class xy.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/dot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class “dot” — dot-class","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class “dot” — dot-class","text":"","code":".[as.free(\"x\"), as.free(\"y\")] #> [1] x^-1.y^-1.x.y  .[abc(1:6),\"z\"] #> [1] a^-1.z^-1.a.z                                    #> [2] b^-1.a^-1.z^-1.a.b.z                             #> [3] c^-1.b^-1.a^-1.z^-1.a.b.c.z                      #> [4] d^-1.c^-1.b^-1.a^-1.z^-1.a.b.c.d.z               #> [5] e^-1.d^-1.c^-1.b^-1.a^-1.z^-1.a.b.c.d.e.z        #> [6] f^-1.e^-1.d^-1.c^-1.b^-1.a^-1.z^-1.a.b.c.d.e.f.z  x <- rfree() y <- rfree() z <- rfree()  .[x,y] == -x-y+x+y   # should be TRUE #> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE  abelianize(.[x,y]) #> [1] 0 0 0 0 0 0 0  ## Jacobi identity _not_ satisfied with this definition: is.id(.[x,.[y,z]] + .[y,.[z,x]] + .[z,.[x,y]]) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  ## But the Hall-Witt identity is: all(is.id(.[.[x,-y],z]^y + .[.[y,-z],x]^z + .[.[z,-x],y]^x)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/freegroup/reference/free.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects of class free — free","title":"Objects of class free — free","text":"Generate, test , objects class free","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objects of class free — free","text":"","code":"free(x) as.free(x) is.free(x) list_to_free(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objects of class free — free","text":"x Function free() needs either two-row matrix,     list two-row matrices; function .free()     attempts coerce different types argument passing     free() (possibly via list_to_free())","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/free.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Objects of class free — free","text":"basic structure element free group two-row matrix. top row symbols (1=, 2=b, 3=c, etc) bottom row corresponding power.  Thus \\(^2ba^{-1}c^9\\) Function free() needs either two-row matrix list two-row matrices.  place package sets class object free.  Function .free() bit user-friendly tries bit harder Right Thing. package uses setOldClass(\"free\") dot methods.","code":"> rbind(c(1,2,1,3),c(2,1,-1,9))      [,1] [,2] [,3] [,4] [1,]    1    2    1    3 [2,]    2    1   -1    9 >"},{"path":"https://robinhankin.github.io/freegroup/reference/free.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Objects of class free — free","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects of class free — free","text":"","code":"free(rbind(1:5,5:1)) #> [1] a^5.b^4.c^3.d^2.e  x <- rfree(10,3) x #>  [1] b^3.c^3.a^2   a^-2.c^3.a^-1 b^3.a^4       b^3.c^2.b^-2  a^-3.b^2      #>  [6] c^-3.b^2      a^2           b.c^-2        b^2.a         a^-2.c^-1     x+x #>  [1] b^3.c^3.a^2.b^3.c^3.a^2 a^-2.c^3.a^-3.c^3.a^-1  b^3.a^4.b^3.a^4         #>  [4] b^3.c^2.b.c^2.b^-2      a^-3.b^2.a^-3.b^2       c^-3.b^2.c^-3.b^2       #>  [7] a^4                     b.c^-2.b.c^-2           b^2.a.b^2.a             #> [10] a^-2.c^-1.a^-2.c^-1     x-x #>  [1] 0 0 0 0 0 0 0 0 0 0 x[1:5]*(1:5) #> [1] b^3.c^3.a^2                                  #> [2] a^-2.c^3.a^-3.c^3.a^-1                       #> [3] b^3.a^4.b^3.a^4.b^3.a^4                      #> [4] b^3.c^2.b.c^2.b.c^2.b.c^2.b^-2               #> [5] a^-3.b^2.a^-3.b^2.a^-3.b^2.a^-3.b^2.a^-3.b^2   as.free(c(4,3,2,2,2)) #> [1] d.c.b^3 as.free(\"aaaabccccaaaaa\") #> [1] a^4.b.c^4.a^5 as.free(c(\"a\",\"A\",\"abAAA\")) #> [1] a        a^-1     a.b.a^-3"},{"path":"https://robinhankin.github.io/freegroup/reference/freegroup-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The Free Group — freegroup-package","title":"The Free Group — freegroup-package","text":"free group R; juxtaposition represented   plus.  Includes inversion, multiplication scalar,   group-theoretic power operation, Tietze forms.  cite   package publications please use Hankin (2022)   <doi:10.48550/ARXIV.2212.05883>.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/freegroup-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Free Group — freegroup-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/freegroup-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Free Group — freegroup-package","text":"Robin K. S. Hankin [aut, cre] (ORCID:     <https://orcid.org/0000-0001-5982-0415>) Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/freegroup-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Free Group — freegroup-package","text":"","code":"p <- rfree(10,6,3) x <- as.free('x')  p+x #>  [1] c^-6.b^-1.c.b^4.c^6.x          c^4.b^-5.a^-5.c^4.x            #>  [3] b^-1.c^-1.b^-1.x               b^-1.c^3.b^-6.a^-1.x           #>  [5] c^4.b^-1.c^2.a^4.c^-3.b^6.x    c^-5.a^5.b^-4.c^-1.b^-2.a^-5.x #>  [7] c^5.a^3.b^2.a^-4.x             c^5.b^3.c^-1.b^4.x             #>  [9] c^3.b^-14.c^6.a^3.x            a^3.b^8.a^-9.x                  p^x #>  [1] x^-1.c^-6.b^-1.c.b^4.c^6.x          x^-1.c^4.b^-5.a^-5.c^4.x            #>  [3] x^-1.b^-1.c^-1.b^-1.x               x^-1.b^-1.c^3.b^-6.a^-1.x           #>  [5] x^-1.c^4.b^-1.c^2.a^4.c^-3.b^6.x    x^-1.c^-5.a^5.b^-4.c^-1.b^-2.a^-5.x #>  [7] x^-1.c^5.a^3.b^2.a^-4.x             x^-1.c^5.b^3.c^-1.b^4.x             #>  [9] x^-1.c^3.b^-14.c^6.a^3.x            x^-1.a^3.b^8.a^-9.x                  sum(p) #> [1] c^-6.b^-1.c.b^4.c^10.b^-5.a^-5.c^4.b^-1.c^-1.b^-2.c^3.b^-6.a^-1.c^4.b^-1.c^2.a^4.c^-3.b^6.c^-5.a^5.b^-4.c^-1.b^-2.a^-5.c^5.a^3.b^2.a^-4.c^5.b^3.c^-1.b^4.c^3.b^-14.c^6.a^6.b^8.a^-9  abelianize(p) #>  [1] b^3.c         a^-5.b^-5.c^8 b^-2.c^-1     a^-1.b^-7.c^3 a^4.b^5.c^3   #>  [6] b^-6.c^-6     a^-1.b^2.c^5  b^7.c^4       a^3.b^-14.c^9 a^-6.b^8       subsu(p,\"ab\",\"z\") #>  [1] c^-6.z^-1.c.z^4.c^6       c^4.z^-10.c^4             #>  [3] z^-1.c^-1.z^-1            z^-1.c^3.z^-7             #>  [5] c^4.z^-1.c^2.z^4.c^-3.z^6 c^-5.z.c^-1.z^-7          #>  [7] c^5.z                     c^5.z^3.c^-1.z^4          #>  [9] c^3.z^-14.c^6.z^3         z^2                       subs(p,a='z') #>  [1] c^-6.b^-1.c.b^4.c^6          c^4.b^-5.z^-5.c^4            #>  [3] b^-1.c^-1.b^-1               b^-1.c^3.b^-6.z^-1           #>  [5] c^4.b^-1.c^2.z^4.c^-3.b^6    c^-5.z^5.b^-4.c^-1.b^-2.z^-5 #>  [7] c^5.z^3.b^2.z^-4             c^5.b^3.c^-1.b^4             #>  [9] c^3.b^-14.c^6.z^3            z^3.b^8.z^-9                   discard(p+x,'a') #>  [1] c^-6.b^-1.c.b^4.c^6.x c^4.b^-5.c^4.x        b^-1.c^-1.b^-1.x      #>  [4] b^-1.c^3.b^-6.x       c^4.b^-1.c^-1.b^6.x   c^-5.b^-4.c^-1.b^-2.x #>  [7] c^5.b^2.x             c^5.b^3.c^-1.b^4.x    c^3.b^-14.c^6.x       #> [10] b^8.x"},{"path":"https://robinhankin.github.io/freegroup/reference/getlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get letters of a freegroup object — getlet","title":"Get letters of a freegroup object — getlet","text":"Get symbols freegroup object","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/getlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get letters of a freegroup object — getlet","text":"","code":"getlet(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/getlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get letters of a freegroup object — getlet","text":"x Object class free","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/getlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get letters of a freegroup object — getlet","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/getlet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get letters of a freegroup object — getlet","text":"default, return list elements corresponding elements   x.  , object x length 1, vector   returned.  result sorted convenience.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/getlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get letters of a freegroup object — getlet","text":"","code":"(x <- rfree(6,7,3)) #> [1] b^-2.a^-1.c^-5.b^-5     a^14.c^-3.b^7.a^-2      a^-2.c^3.b^7.c^5        #> [4] c^-3.b.c^-2.a^-7        b.a^7.b^2.a.b^4.c^-5    c^-7.a^7.b^-7.c^-2.b^-5  getlet(x) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 1 2 3 #>  #> [[3]] #> [1] 1 2 3 #>  #> [[4]] #> [1] 1 2 3 #>  #> [[5]] #> [1] 1 2 3 #>  #> [[6]] #> [1] 1 2 3 #>   as.free(getlet(x))   #> [1] a.b.c a.b.c a.b.c a.b.c a.b.c a.b.c  identical(as.free(getlet(abc(1:26))), abc(1:26)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/freegroup/reference/identity.html","id":null,"dir":"Reference","previous_headings":"","what":"The identity element — identity","title":"The identity element — identity","text":"Create test identity element","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/identity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The identity element — identity","text":"","code":"is.id(x) id(n) # S3 method for class 'free' is.id(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/identity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The identity element — identity","text":"x Object class free n Strictly positive integer","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/identity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The identity element — identity","text":"Function id() returns vector n free objects, identity element.  ask happens \\(n=0\\). Function .id() returns Boolean indicating whether element identity .  identity can also generated using .free(0).","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/identity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The identity element — identity","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/identity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The identity element — identity","text":"","code":"id() #> [1] 0 as.free(0)   # convenient R idiom for creating the identity #> [1] 0  x <- rfree(10,3) stopifnot(all(x == x + as.free(0))) stopifnot(all(is.id(x-x)))"},{"path":"https://robinhankin.github.io/freegroup/reference/keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or drop symbols — keep","title":"Keep or drop symbols — keep","text":"Keep drop symbols","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop symbols — keep","text":"","code":"keep(a, yes) discard(a, no)"},{"path":"https://robinhankin.github.io/freegroup/reference/keep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop symbols — keep","text":"Object class free yes,Specification symbols either keep (yes) discard     (), coerced free object","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/keep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Keep or drop symbols — keep","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/keep.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Keep or drop symbols — keep","text":"Function keep() needs explicit return() prevent   returning invisibly. functions vectorised first argument   second. second argument—symbols keep discard—formally   vector nonnegative integers, functions coerce free   object.  symbols kept dropped union symbols   elements vector.  Function discard() formerly   known drop() conflicted base::drop(). functions nothing common APL's take()   drop().","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/keep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop symbols — keep","text":"","code":"(x <- rfree(20,5,8)) #>  [1] b^5.c.b.h^-5            f^-4.d^5.e^3.f^3        a^3.g.a^-3.g^-5.c^-1    #>  [4] h^3.a^-2.c^-2.f^-2      c^-4.e.b^3.e^4.g^-5     b^-3.a^-2.d^-1.h^-4     #>  [7] h^5.a^-2.h^-4           g^3.a^-1.g^-5.d^-5.e^-3 d.b^2.g^2.f.d^4         #> [10] b^4.f^-1.h^5.d^8        g^-3.a^3.c^-2.d^-3      d^4.e^-3.b.e^-3         #> [13] c^-2.h.a^-2.b^-3        b^-2.g^-1.f^4.b^5       b^4.g^3.c^-3.g^2.d^-4   #> [16] h^4.f^-5.h^-5.a^2.f^-2  d^-7.f^5.c^-4           d^-4.c^4.h^5.f^3        #> [19] b^-5.a^-3.f^-1.g^-3.d^2 f^-3.g^5.d^2.h^4         keep(x,abc(4))           # keep only symbols a,b,c,d #>  [1] b^5.c.b        d^5            c^-1           a^-2.c^-2      c^-4.b^3       #>  [6] b^-3.a^-2.d^-1 a^-2           a^-1.d^-5      d.b^2.d^4      b^4.d^8        #> [11] a^3.c^-2.d^-3  d^4.b          c^-2.a^-2.b^-3 b^3            b^4.c^-3.d^-4  #> [16] a^2            d^-7.c^-4      d^-4.c^4       b^-5.a^-3.d^2  d^2            discard(x,as.free('cde'))   # drop symbols c,d,e #>  [1] b^6.h^-5               f^-1                   a^3.g.a^-3.g^-5        #>  [4] h^3.a^-2.f^-2          b^3.g^-5               b^-3.a^-2.h^-4         #>  [7] h^5.a^-2.h^-4          g^3.a^-1.g^-5          b^2.g^2.f              #> [10] b^4.f^-1.h^5           g^-3.a^3               b                      #> [13] h.a^-2.b^-3            b^-2.g^-1.f^4.b^5      b^4.g^5                #> [16] h^4.f^-5.h^-5.a^2.f^-2 f^5                    h^5.f^3                #> [19] b^-5.a^-3.f^-1.g^-3    f^-3.g^5.h^4            keep(x,alpha(3))  # keep only abc  #>  [1] c    0    c^-1 c^-2 c^-4 0    0    0    0    0    c^-2 0    c^-2 0    c^-3 #> [16] 0    c^-4 c^4  0    0"},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":null,"dir":"Reference","previous_headings":"","what":"Outer automorphisms of the free group — nielsen","title":"Outer automorphisms of the free group — nielsen","text":"Vectorized functionality implement outer automorphisms   free group","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outer automorphisms of the free group — nielsen","text":"","code":"permsymb_single_X(X,f) permsymb_single_f(X,f) permsymb_vec(X,f) permsymb(X,f) autosub_lowlevel(M,e,S) autosub(X,e,S,automorphism_warning=TRUE)"},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outer automorphisms of the free group — nielsen","text":"X,S Object class free f Permutation function M Single free group element, two-row matrix form e Single element substitute automorphism_warning Boolean, default TRUE meaning     give warning requested substitution     automorphism FALSE meaning give warning","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Outer automorphisms of the free group — nielsen","text":"1924, Nielsen showed automorphism group free group basis \\([x_1,\\ldots,x_n]\\) generated following four elementary Nielsen transformations: switch \\(x_1\\) \\(x_2\\) Cyclically permute \\(x_1,x_2,\\ldots,x_n\\)   \\(x_2,\\ldots,x_n,x_1\\) Replace \\(x_1\\) \\(x_1^{-1}\\) Replace \\(x_1\\) \\(x_1x_2\\). functions documented give vectorized methods effect outer automorphisms, using permutations package. Operations 1 2 generate symmetric group \\(S_n\\) automorphisms effected function permsymb().  Operation 3 carried flip() operation 4 subsymb(). Functions permsymb_single_X(), permsymb_single_f(), permsymb_vec() subsymb_lowlevel() low-level helper functions really suited end user; use permsymb(), (flip) subsymb() instead.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Outer automorphisms of the free group — nielsen","text":"Wikipedia contributors. (2018, October 29).  “Automorphism group free group”. Wikipedia, Free Encyclopedia. Retrieved 19:58, January 10, 2019, https://en.wikipedia.org/w/index.php?title=Automorphism_group_of_a_free_group&oldid=866270661","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Outer automorphisms of the free group — nielsen","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Outer automorphisms of the free group — nielsen","text":"Function permsymb() intended work nicely   permutations package; see inst/outer.Rmd   illustrations.  function perfect.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/outer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outer automorphisms of the free group — nielsen","text":"","code":"P <- as.free(c(\"abc\",\"aba\",\"cc\",\"ca\")) autosub(P,\"c\",as.free(\"xyz\")) #> [1] a.b.c.x.y.z     a.b.a           c.x.y.z.c.x.y.z c.x.y.z.a        flip(P,\"c\") #> [1] a.b.c^-1 a.b.a    c^-2     c^-1.a   flip(P,\"ac\") #> [1] a^-1.b.c^-1 a^-1.b.a^-1 c^-2        c^-1.a^-1"},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":null,"dir":"Reference","previous_headings":"","what":"Primitive elements of the free algebra — primitive","title":"Primitive elements of the free algebra — primitive","text":"primitive word one form ^m   \\(m>1\\).  concept used Lyndon Schutzenberger 1962.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primitive elements of the free algebra — primitive","text":"","code":"is.primitive(x) is.power(d,n)"},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primitive elements of the free algebra — primitive","text":"x Freegroup object, coerced Tietze form d Numeric vector n Integer","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Primitive elements of the free algebra — primitive","text":"Function .primitive() returns boolean vector indicating whether elements argument primitive. Function .power() lower-level helper function. .power(d,n) determines whether d n-th power (, d may written n copies numeric vector). Thus is_power(c(4,5,7,4,5,7,4,5,7,4,5,7),4) returns TRUE primary argument indeed fourth power (c(4,5,7)).","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primitive elements of the free algebra — primitive","text":"Returns boolean.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Primitive elements of the free algebra — primitive","text":"R. C. Lyndon M. P. Schutzenberger 1962.  “equation   \\(^M=b^Nc^P\\) free group”.  Michigan Mathematical Journal,   9(4): 289–298.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Primitive elements of the free algebra — primitive","text":"Robin K. S. Hankin.  code finding factors integer   (somewhat ) inspired numbers package.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/primitive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Primitive elements of the free algebra — primitive","text":"","code":"is.primitive(as.free(c(\"a\",\"aaaa\", \"aaaab\", \"aabaab\", \"aabcaabcaabcaabc\"))) #> [1]  TRUE FALSE  TRUE FALSE FALSE  is.power(c(7,8,4,7,8,4,7,8,4,7,8,4),4) #> [1] TRUE   table(is.primitive(rfree(100))) #>  #> FALSE  TRUE  #>     9    91    ## primitive with >1 symbols is rare: x <- rfree(1000) x[!is.primitive(x) & number(x)>1] #> [1] c^-1.d.c^-1.d ##  try x <- rfree(10000) [but this takes a long time]"},{"path":"https://robinhankin.github.io/freegroup/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print free objects — print","title":"Print free objects — print","text":"Print methods free objects","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print free objects — print","text":"","code":"# S3 method for class 'free' print(x,...) as.character_free(m,latex=getOption(\"latex\"))"},{"path":"https://robinhankin.github.io/freegroup/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print free objects — print","text":"x Object class free print method m two-row matrix function .character_free() latex Boolean, TRUE meaning print latex-friendly     output including curly braces, default NULL option     meaning give nicer-looking output latex typeset     incorrectly ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print free objects — print","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/print.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Print free objects — print","text":"print method change internal representation free object, list integer matrices. default print method uses multiplicative notation (powers) inconsistent juxtaposition method “+”. print method special dispensation length-zero free objects handled entirely consistently. default print method uses lowercase letters -z, possible override using options(\"freegroup_symbols\" = foo), foo character vector.  desirable 26 symbols, unallocated symbols appear NA. package allow user set options(\"freegroup_symbols\") unhelpful things like rep(\"\",20) without complaining (actually , crazy fool).","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print free objects — print","text":"","code":"## default symbols:  abc(26) #> [1] a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z rfree(1,10) #> [1] i^7.g^6.i^9.h^4.b^2.c^-8.g^10.j^7.e^6.j^9   # if we need more than 26: options(freegroup_symbols=state.name) rfree(10,4) #>  [1] Alabama.Alaska^4.Arkansas^-2.Arizona        #>  [2] Alabama^3.Arkansas^2                        #>  [3] Arkansas^-4.Arizona^-2                      #>  [4] Arizona^-4                                  #>  [5] Arkansas^-2.Arizona^2.Alabama^-1            #>  [6] Alabama^2.Alaska^2.Arkansas^3               #>  [7] Alabama^-4.Arizona^4.Alabama^-2.Alaska^-3   #>  [8] Arizona^2.Alaska^-3.Arkansas                #>  [9] Arkansas^4.Alaska^-3.Arizona^-4.Arkansas^-1 #> [10] Arizona^4.Alabama^-2                         # or even: jj <- letters[1:10] options(freegroup_symbols=apply(expand.grid(jj,jj),1,paste,collapse=\"\")) rfree(10,10,100,4) #>  [1] ji^2.bd.dj.ge^2.dc^4.jb^4.bc^4.bg^4.eh^3.hi^3   #>  [2] jd^4.cg^2.hj^3.ca.ag^2.ji^4.ai^2.fa^3.ie^4.jb^4 #>  [3] fi^5.cj^3.fj^2.ha^2.dg^4.de^3.cb^4.jc^4.ei^4    #>  [4] cg.gc^3.fi^4.if.ed.eg^3.bg^3.gg.ii^2.bb         #>  [5] cc^2.cf.dg^3.cj.fd^2.ga^3.jj.bh.dg^3.dc         #>  [6] jc^3.hg^3.db^3.aj^3.ed^4.jc^3.gf.bi^4.ag^4.ib   #>  [7] eb^4.ba.ha^4.ab^2.gj.bb^2.fi^2.ah^2.ia^2.cg^3   #>  [8] bg^4.hi^2.ig^2.cb^2.hh^4.ah^3.jd.gg^2.ef^5      #>  [9] eh^2.hc^2.hj^3.jf.fd^3.de.ih^3.ii^4.df.ec       #> [10] je^4.ji.hc^4.eb.ia^4.ee^4.fh^3.hb^3.hh^2.jg^4    options(freegroup_symbols=NULL)  #  NULL is interpreted as letters a-z rfree(10,4)            #  back to normal #>  [1] b^-4.a^4.c^4.a^3 b^-4.c^4         c.d^-3.c^-1      d^-2.b^2         #>  [5] b.a^-1           d^2.b^-4         d^3.c^-1.d       d^-1.c^-1.d      #>  [9] c^9.b^2          c^-4.b^4.c^-1"},{"path":"https://robinhankin.github.io/freegroup/reference/reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduction of a word to reduced form — reduce","title":"Reduction of a word to reduced form — reduce","text":"Given word, remove redundant zero-power terms,   consolidate adjacent like terms single power","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduction of a word to reduced form — reduce","text":"","code":"reduce(a) is_reduced(a) remove_zero_powers(a) consolidate(a) is_proper(a)"},{"path":"https://robinhankin.github.io/freegroup/reference/reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduction of a word to reduced form — reduce","text":"object class free","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/reduce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduction of a word to reduced form — reduce","text":"word reduced symbol appears next inverse   symbol zero power.  essence package reduce   word reduced form.  Thus \\(^2b^{-1}ba\\)   transformed \\(^3\\). package, reduction happens automatically creation,   function free(). Apart is_proper(), functions take free   object, meat function operates single two-row   matrix. Reduction carried repeatedly consolidating adjacent terms   identical symbol (function consolidate()), removing zero   power terms (function remove_zero_power()) word   reduced form (function is_reduced()). Function is_proper() checks see whether matrix suitably   formed passing reduce(). free object cyclically reduced iff every cyclic   permutation word reduced.  reduced word cyclically   reduced iff first letter inverse last one.    reduced word cyclically reduced first last symbol differ   (irrespective power) , identical, powers opposite   sign.  example, abac abca cyclically reduced   abca^{-1} .  Function .cyclically.reduced()   tests , documented cycred.Rd.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/reduce.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reduction of a word to reduced form — reduce","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduction of a word to reduced form — reduce","text":"","code":"## create a matrix: (M <- rbind(c(1,2,3,3,2,3,2,1),c(1,2,3,-3,5,0,7,0))) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    3    2    3    2    1 #> [2,]    1    2    3   -3    5    0    7    0  ## call the print method (note non-reduced form): as.character_free(M) #> [1] \"a.b^2.c^3.c^-3.b^5.c^0.b^7.a^0\"  ## show the effect of reduce(): as.character_free(reduce(M)) #> [1] \"a.b^14\"  ## free() calls reduce() automatically: free(M) #> [1] a.b^14"},{"path":"https://robinhankin.github.io/freegroup/reference/rfree.html","id":null,"dir":"Reference","previous_headings":"","what":"Random free objects — rfree","title":"Random free objects — rfree","text":"Creates vector random free objects.  Intended   quick “get going” example free group objects","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/rfree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random free objects — rfree","text":"","code":"rfree(n = 7, size = 4, number = size, powers = seq(from = -size, to = size)) rfreee(n = 30, size = 8, number = size, powers = seq(from = -size, to = size)) rfreeee(n = 40, size = 25, number = size, powers = seq(from = -size, to = size))"},{"path":"https://robinhankin.github.io/freegroup/reference/rfree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random free objects — rfree","text":"n Length random vector generate size Maximum length element number many distinct letters sample powers Powers resulting polynomial.  integer n     interpreted (via sample()) seq_len(n)","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/rfree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random free objects — rfree","text":"auxiliary arguments specify general complexity returned object small meaning simpler. Functions rfreee() rfreeee() give, default, successively complicated expressions.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/rfree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random free objects — rfree","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/rfree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random free objects — rfree","text":"","code":"rfree() #> [1] c^3.d^-3.c^3.d^4  a^-4.d^2          a^-1.b^2.c^2.b^-4 b^2.d^-1          #> [5] c^-2.a^-3.b^2     d.c^2.d^2         a^2.b^-4.d.a^-1    abelianize(rfree()) #> [1] b^3.c^2.d^-2 d^4          a^-1.b^-1    a^-1.b^2.c^8 b^-1.c^4     #> [6] b^3.c^2      a.d^7         rfree(10,2) #>  [1] a       b^-1    a^-2    a^2.b   a^2.b^2 a^3     b.a     b^-3    b       #> [10] a       rfree(10,30,26) #>  [1] k^-22.g^-4.z^-4.e^-14.p^-12.g^-9.k^-5.e^-1.o^-30.d^10.p^-17.t^15.b^3.g^-12.t^-7.d^30.o^-19.m^-27.h^7.e^16.l^18.y^-19.m^-14.n^19.z^-6.k^-22.p^-12.o^-26.p^30.b^29 #>  [2] z^8.y^-5.p^25.c^-12.p^-20.n.p.u^-15.p^3.e^27.z^-14.b^30.p^-24.t^-21.k^15.n^-14.b^29.u^-13.t^23.l^-21.s^-12.h^-26.a^6.j^8.c^28.y^44                               #>  [3] b^-3.j^-26.r^-13.k^9.a^-8.p^-23.y^-1.s^13.n^26.g^7.e^-28.b^19.e^25.b^13.j^8.e^-24.d^-26.t^-25.x^-14.u^28.n^-4.e^-27.q^-28.j^-30.u^-2.o^-7.d^-17.w^-24            #>  [4] u^25.p^-25.s^7.h^-26.u^13.t^14.a^-5.s^19.v^-6.y^20.o^8.b^11.v^21.e.j^-13.z^-17.n.w^-17.o^-27.l^4.f^-4.o^17.q^21.f^13.m^13.d^-13.k^-24.e^-27                      #>  [5] w^-17.u^-26.w^-28.y^-16.a^12.o^21.z^21.r.z^-14.f^26.r^29.n^-11.a^3.x^-21.e^-4.g^20.c^2.t^-23.c^-20.k^25.a^12.o^5.z^27.a^14.j^13.i^-14.c^-3.q^-6                  #>  [6] i^-23.c^-26.w^-30.r^12.v^11.f^-1.b^-8.t^-13.z^-2.t^22.o^17.a^-27.h^11.q^28.a^-7.y^28.x^-3.t^5.r^-5.c^-5.u^-15.m^-3.o^-18.v^6.j^-28.t^29.z^-2.v^-9.t^12           #>  [7] a^14.c^-7.j^-4.k^9.t^11.i^-12.t^13.i^5.z^20.i^14.w^4.t^5.z^-30.i^-12.q^-19.s^-3.e^-3.m^-18.e^13.k^10.o^-20.s^-1.i^16.f^17.c^7.l^25.v^-20                         #>  [8] j^-10.s^-5.w^2.t^4.x^2.g^24.h^-6.r^7.v^-21.c^2.v^-8.p^-3.u^-21.a^-3.u^-23.w^-15.h^-3.d^12.w^18.a^-14.l^-1.k.t^6.n^-7.d^16.u^-8.e^-2.d^2.v^6                      #>  [9] a^25.h^18.u^13.q^-16.i^-28.w^10.s^8.c^20.l^5.u^-19.p^-24.b^-1.l^-4.j^-19.n^23.u^-10.x^29.l^10.p^3.c^14.g^9.r^28.s^-6.j^-26.m^-3.u^11.p^-17.s^-22                 #> [10] c^-1.q^-9.y^5.f^-24.n^6.e^14.a^5.x^-17.p^-6.y^23.r^28.u^-8.c^15.v^21.g^-20.q^3.p^18.u^24.c^15.b^-24.t^25.u^-11.j^3.z^-12.c^24.a^-7.d^-18.u^-23.n^11               rfree(powers=5) #> [1] c^5.b^4.a^2.d^3 d^3.c^5.d^2.c^5 a.d^2.c^5.d^2   a^2.c^5.b^5     #> [5] c^2.b^2.c^2     b^2.a^2.b^3.d^4 a^4.d^8         rfree(powers=5:6) #> [1] b^5.c^6.d^6.a^6 a^6.c^11.b^6    b^6.a^5.c^5.d^6 d^6.c^6.d^11    #> [5] d^5.a^5.b^5.d^5 c^6.d^6.a^5.d^6 d^5.b^6.c^6.d^5  rfree(20,2)^alpha(26) #>  [1] z^-1.b^-2.a.z    z^-1.b^-2.a^2.z  z^-1.a.b^-2.z    z^-1.b.a^-2.z    #>  [5] 0                z^-1.a^-1.z      z^-1.b^-2.a^-1.z z^-1.a^-2.b^-1.z #>  [9] z^-1.b^2.z       z^-1.a^3.z       z^-1.b^-1.a^2.z  z^-1.b.z         #> [13] z^-1.b^-3.z      z^-1.a^2.b^2.z   z^-1.b^-2.a^-2.z z^-1.b^-3.z      #> [17] z^-1.b.a^-2.z    z^-1.b^4.z       z^-1.a^4.z       z^-1.a^2.z"},{"path":"https://robinhankin.github.io/freegroup/reference/shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Permute elements of a vector in a cycle — shift","title":"Permute elements of a vector in a cycle — shift","text":"Given vector, permute elements cyclic permutation","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permute elements of a vector in a cycle — shift","text":"","code":"shift(x,i=1)"},{"path":"https://robinhankin.github.io/freegroup/reference/shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permute elements of a vector in a cycle — shift","text":"x Vector Integer, number places permute.  Negative values mean     count end","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/shift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permute elements of a vector in a cycle — shift","text":"function magic package, motivated discussed.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permute elements of a vector in a cycle — shift","text":"Returns vector","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/shift.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permute elements of a vector in a cycle — shift","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permute elements of a vector in a cycle — shift","text":"","code":"shift(1:9) #> [1] 9 1 2 3 4 5 6 7 8 shift(1:9,-1) #> [1] 2 3 4 5 6 7 8 9 1  shift(1:9,2) #> [1] 8 9 1 2 3 4 5 6 7"},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":null,"dir":"Reference","previous_headings":"","what":"Bignesses of a free object — size","title":"Bignesses of a free object — size","text":"Various metrics describe “big” free object ","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bignesses of a free object — size","text":"","code":"size(a) total(a) number(a) bigness(a)"},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bignesses of a free object — size","text":"Vector free group objects","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bignesses of a free object — size","text":"size object number pure powers     (number columns matrix representation     word) total object sum absolute     values powers number object number distinct symbols     Thus size(^2ba)=3, total(^2ba)=4,   number(^2ba)=2. Function bigness() convenience wrapper returns   three bigness measures.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bignesses of a free object — size","text":"functions return integer vector.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bignesses of a free object — size","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bignesses of a free object — size","text":"like thank Murray Jorgensen insightful comments inspired functionality.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bignesses of a free object — size","text":"","code":"(a <- rfree(20,6,4)) #>  [1] b^-3.d.b^-5.a^-5.c^3.d      d^2.b^-8                    #>  [3] a^-3.b^4                    c^-3.b^-3.d^-3              #>  [5] b^8.a^4.c^-1.b^5.d^-5       a^-2.b^2.a^6.c^-6.a^-3.c^-5 #>  [7] a^4.c^3.b^-3.c^-6           a^-3.b^9.a^3.b^-5           #>  [9] a^6.d^2.c^-3.d^-4.b         d^5.b^2.a^8.b^5             #> [11] d^-4.c^4.d^2.c^-3.d^5       d^6.a^10                    #> [13] c^3.d.c^4                   c.b^5.d^2.c^2.a^5           #> [15] c^6.b^5.a                   b^3.a^-4.b.d^-5             #> [17] b^6.d^6.a^-2.b^3            b^-6.d^-3.b^-9.d^-1.a^2     #> [19] a^3.b^6.c^2.a^-2.d          c^-8.d^-4.c^-4.a^5.d^-1     size(a) #>  [1] 6 2 2 3 5 6 4 4 5 4 5 2 3 5 3 4 4 5 5 5 total(a) #>  [1] 18 10  7  9 23 24 16 20 16 20 18 16  8 15 12 13 17 21 14 22 number(a) #>  [1] 4 2 2 3 4 3 3 2 4 3 2 2 2 4 3 3 3 3 4 3  a <- rfree(20,6,4) b <- rfree(20,6,4)  ## Following should all be TRUE size(a+b)   <= size(a)  + size(b) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE total(a+b)  <= total(a) + total(b) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE number(a+b) <= number(a)+ number(b) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE  bigness(rfree(10,3,3)) #>                size total number #> a^-1.c^-1.b^-3    3     5      3 #> a^-1              1     1      1 #> a^2.b^-3.c^-1     3     6      3 #> a^-1.b^-2         2     3      2 #> b^-1.a^3          2     4      2 #> a^4               1     4      1 #> b^-1.a^-3.b       3     5      2 #> a^-1.c^-2         2     3      2 #> c^-2              1     2      1 #> c^-3.b^3.a        3     7      3 bigness(allconj(rfree(1,6,1))) #>       size total number #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1 #> a^-14    1    14      1"},{"path":"https://robinhankin.github.io/freegroup/reference/subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute and invert symbols — subs","title":"Substitute and invert symbols — subs","text":"Substitute invert specific symbols free object","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute and invert symbols — subs","text":"","code":"subsu(X, from, to) subs(X, ...) flip(X, turn)"},{"path":"https://robinhankin.github.io/freegroup/reference/subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute and invert symbols — subs","text":"X Object class free ,,turn Objects coerced class free specifying symbols     alter.  arguments coerced symbols using     getlet(.free()) ... Named arguments substitution","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/subs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitute and invert symbols — subs","text":"Function subsu(X,,) takes object X transforms   every symbol present symbol specified   . Function flip(X,turn) takes object X replaces every   symbol present turn inverse. Function discard(), documented keep.Rd, effectively   substitutes symbol identity element (thereby discarding   ). Experimental function subs() modelled similar   functionality freealg package makes idiom   subs(X,='z') work expected (viz, taking instance   symbol replacing x).","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/subs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Substitute and invert symbols — subs","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/subs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Substitute and invert symbols — subs","text":"Functions subs() subsu() substitute particular   symbols, free group elements.  particular, careful   uppercase (inverse) symbols; power discarded,   substituting x substituting X.   behaviour might change future.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freegroup/reference/subs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute and invert symbols — subs","text":"","code":"subsu(abc(1:10),abc(5),'z') #>  [1] z             z^2           z^3           z^4           z^5           #>  [6] z^5.f         z^5.f.g       z^5.f.g.h     z^5.f.g.h.i   z^5.f.g.h.i.j flip(abc(1:10),abc(5)) #>  [1] a^-1                               a^-1.b^-1                          #>  [3] a^-1.b^-1.c^-1                     a^-1.b^-1.c^-1.d^-1                #>  [5] a^-1.b^-1.c^-1.d^-1.e^-1           a^-1.b^-1.c^-1.d^-1.e^-1.f         #>  [7] a^-1.b^-1.c^-1.d^-1.e^-1.f.g       a^-1.b^-1.c^-1.d^-1.e^-1.f.g.h     #>  [9] a^-1.b^-1.c^-1.d^-1.e^-1.f.g.h.i   a^-1.b^-1.c^-1.d^-1.e^-1.f.g.h.i.j   o <- rfree(30,5,10)  # Following tests should all be TRUE: size(flip(o,'a'))   == size(o) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE number(flip(o,'a')) == number(o) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE total(flip(o,'a'))  == total(o) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE  size(subsu(o,'a','b'))   <= size(o) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE number(subsu(o,'a','b')) <= number(o) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE total(subsu(o,'a','b'))  <= total(o) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   frog <- rfree() subs(frog,a='x') #> [1] x^3.b^-4.d^-4.x     c^-1.x^-4.c^-2.b^-4 x^3.d^2.x^-1.c^-4   #> [4] d^-2.c^8            d.c^3               d^-1                #> [7] c^-4.x^2.c.d^-4"},{"path":"https://robinhankin.github.io/freegroup/reference/sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated summation by concatenation — sum","title":"Repeated summation by concatenation — sum","text":"Concatenates arguments give single free object","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated summation by concatenation — sum","text":"","code":"# S3 method for class 'free' sum(..., na.rm = FALSE)"},{"path":"https://robinhankin.github.io/freegroup/reference/sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated summation by concatenation — sum","text":"... Objects class free, summed na.rm Boolean, indicating whether ignore NA entries     (currently ignored)","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated summation by concatenation — sum","text":"Concatenates arguments gives single element free   group.  works nicely rev(), see examples.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/sum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated summation by concatenation — sum","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/sum.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Repeated summation by concatenation — sum","text":"package uses additive notation, easy forget wonder idiom like prod(rfree()) work desired.  course, package using additive notation means one probably wants sum(rfree()).","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated summation by concatenation — sum","text":"","code":"(x <- rfree(10,3)) #>  [1] a^3.b^-3.c^3  a^3.c^-2.b^-3 c^2           a.c^-1        b^-1.a^-1     #>  [6] b.a^4         c^2.b^-2.a^-3 b^-3          a^4           c^2.b         sum(x) #> [1] a^3.b^-3.c^3.a^3.c^-2.b^-3.c^2.a.c^-1.b^-1.a^-1.b.a^4.c^2.b^-2.a^-3.b^-3.a^4.c^2.b abelianize(sum(x)) #> [1] a^11.b^-10.c^6  (y <- rfree(10,6)) #>  [1] e^-4.f^-1.d^3.f^6         e.a^4.b^2.a^2.f^6.b^-4    #>  [3] f^-5.d^-6.f^3.e^-3        b^2.f^-4.a^-1.e^-6.d^6    #>  [5] a^2.e^-4.b^-4.f.b^-1.e^-4 e^2.a^3.e^2.c^3.d^4       #>  [7] b^-3.c^-4.e^-3.c^-5       d^2.f^4.b^-1.d^4          #>  [9] c^6.b^5.e^-5.a^2.c^2.a    d^2.a^-2.d^4.a             sum(x,y) #> [1] a^3.b^-3.c^3.a^3.c^-2.b^-3.c^2.a.c^-1.b^-1.a^-1.b.a^4.c^2.b^-2.a^-3.b^-3.a^4.c^2.b.e^-4.f^-1.d^3.f^6.e.a^4.b^2.a^2.f^6.b^-4.f^-5.d^-6.f^3.e^-3.b^2.f^-4.a^-1.e^-6.d^6.a^2.e^-4.b^-4.f.b^-1.e^-2.a^3.e^2.c^3.d^4.b^-3.c^-4.e^-3.c^-5.d^2.f^4.b^-1.d^4.c^6.b^5.e^-5.a^2.c^2.a.d^2.a^-2.d^4.a sum(x,y) == sum(sum(x),sum(y)) #> [1] TRUE x+y  # not the same! #>  [1] a^3.b^-3.c^3.e^-4.f^-1.d^3.f^6       a^3.c^-2.b^-3.e.a^4.b^2.a^2.f^6.b^-4 #>  [3] c^2.f^-5.d^-6.f^3.e^-3               a.c^-1.b^2.f^-4.a^-1.e^-6.d^6        #>  [5] b^-1.a.e^-4.b^-4.f.b^-1.e^-4         b.a^4.e^2.a^3.e^2.c^3.d^4            #>  [7] c^2.b^-2.a^-3.b^-3.c^-4.e^-3.c^-5    b^-3.d^2.f^4.b^-1.d^4                #>  [9] a^4.c^6.b^5.e^-5.a^2.c^2.a           c^2.b.d^2.a^-2.d^4.a                  sum(x,-x) #> [1] a^3.b^-3.c^3.a^3.c^-2.b^-3.c^2.a.c^-1.b^-1.a^-1.b.a^4.c^2.b^-2.a^-3.b^-3.a^4.c^2.b.c^-3.b^3.a^-3.b^3.c^2.a^-3.c^-1.b.a^-4.b^-1.a^3.b^2.c^-2.b^3.a^-4.b^-1.c^-2 sum(x,rev(-x)) #> [1] 0  z <- alpha(26) stopifnot(sum(x^z) == sum(x)^z)"},{"path":"https://robinhankin.github.io/freegroup/reference/tietze.html","id":null,"dir":"Reference","previous_headings":"","what":"Tietze form for free group objects — tietze","title":"Tietze form for free group objects — tietze","text":"Translate object class free Tietze form","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/tietze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tietze form for free group objects — tietze","text":"","code":"# S3 method for class 'free' tietze(x) # S3 method for class 'matrix' tietze(x) vec_to_matrix(x)"},{"path":"https://robinhankin.github.io/freegroup/reference/tietze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tietze form for free group objects — tietze","text":"x Object converted","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/tietze.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tietze form for free group objects — tietze","text":"Tietze form word list integers corresponding   symbols word; typically \\(=1,b=2,c=3,d=4\\), etc.  Negative   integers represent inverses symbols.  Thus   c^4.d^-2..c becomes 3 3 3 3 -4 -4 1 3. Function vec_to_matrix() low-level helper function   returns two-row integer matrix.  given 0 NULL,   returns two-row, zero-column matrix.","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/tietze.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tietze form for free group objects — tietze","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freegroup/reference/tietze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tietze form for free group objects — tietze","text":"","code":"(x <- rfree(10,3)) #>  [1] a^-2.b^-1    c^-2.a^-1    c^3.b^3.c^-1 b^-1         c^2.b^-2     #>  [6] c^-2.a^-1    a^3.c^3      a^-1.b^2     a^2.c^-1     c.a^-1       tietze(x) #> [[1]] #> [1] -1 -1 -2 #>  #> [[2]] #> [1] -3 -3 -1 #>  #> [[3]] #> [1]  3  3  3  2  2  2 -3 #>  #> [[4]] #> [1] -2 #>  #> [[5]] #> [1]  3  3 -2 -2 #>  #> [[6]] #> [1] -3 -3 -1 #>  #> [[7]] #> [1] 1 1 1 3 3 3 #>  #> [[8]] #> [1] -1  2  2 #>  #> [[9]] #> [1]  1  1 -3 #>  #> [[10]] #> [1]  3 -1 #>   vec_to_matrix(c(1,3,-1,-1,-1,2)) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    3    1    1    1    2 #> [2,]    1    1   -1   -1   -1    1  as.free(list(c(1,1,8),c(2,-4,-4))) #> [1] a^2.h  b.d^-2  all(as.free(tietze(abc(1:30))) == abc(1:30)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/freegroup/news/index.html","id":"freegroup-12-1","dir":"Changelog","previous_headings":"","what":"freegroup 1.2-1","title":"freegroup 1.2-1","text":"typos","code":""},{"path":"https://robinhankin.github.io/freegroup/news/index.html","id":"freegroup-12-0","dir":"Changelog","previous_headings":"","what":"freegroup 1.2-0","title":"freegroup 1.2-0","text":"CRAN release: 2025-03-20 multiplicative notation now implemented","code":""},{"path":"https://robinhankin.github.io/freegroup/news/index.html","id":"freegroup-11-9","dir":"Changelog","previous_headings":"","what":"freegroup 1.1-9","title":"freegroup 1.1-9","text":"CRAN release: 2025-01-30 bugfixes small documentation improvements proper checking subs() functionality rfreee() depends R >= 4.1.0 new-style pipe","code":""},{"path":"https://robinhankin.github.io/freegroup/news/index.html","id":"freegroup-11-5","dir":"Changelog","previous_headings":"","what":"freegroup 1.1-5","title":"freegroup 1.1-5","text":"improvements vignette bugfixes discussion Hall-Witt identity","code":""},{"path":"https://robinhankin.github.io/freegroup/news/index.html","id":"freegroup-11-4","dir":"Changelog","previous_headings":"","what":"freegroup 1.1-4","title":"freegroup 1.1-4","text":"commutator .[,b] implemented","code":""}]
